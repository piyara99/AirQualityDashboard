@model List<AirQualityDashboard.ViewModels.SensorViewModel>

@{
    ViewData["Title"] = "Real-time Air Quality Monitoring - Colombo";
}

<!-- Load Leaflet and Chart.js -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<style>
    body, html {
        margin: 0;
        padding: 0;
        height: 100%;
        position: relative;
    }

    h2 {
        position: absolute;
        top: 20px;
        left: 30px;
        z-index: 1000;
        background: white;
        padding: 10px 15px;
        margin: 0;
        border-radius: 5px;
        font-size: 20px;
        font-weight: bold;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    #map {
        width: 100%;
        height: 100vh;
    }

    #sensor-list {
        position: absolute;
        top: 100px; /* Added padding below title */
        left: 10px;
        background: white;
        padding: 10px;
        z-index: 1000;
        max-height: 300px;
        overflow-y: auto;
        width: 200px;
        font-size: 13px;
        border: 1px solid #ddd;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }

    #sensor-chart-container {
        position: absolute;
        bottom: 70px; /* Adjusted from 10px to prevent overlap with footer */
        left: 10px;
        width: 350px;
        height: 250px;
        background: white;
        padding: 10px;
        z-index: 1000;
        display: none;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }

    .top-right-links {
        position: absolute;
        top: 10px;
        right: 10px;
        z-index: 1000;
    }

    .top-right-links a {
        margin-left: 10px;
        color: #007bff;
        text-decoration: none;
    }

    .custom-scrollbar::-webkit-scrollbar {
        width: 6px;
    }

    .custom-scrollbar::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 4px;
    }

    .custom-scrollbar::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 4px;
    }

    .custom-scrollbar::-webkit-scrollbar-thumb:hover {
        background: #555;
    }

    /* Title Style */
    
</style>

<h2 style="position:absolute; top:20px; left:50px; z-index:1000; background:white; padding:10px 15px; margin:0; border-radius:5px; font-size:20px; font-weight:bold; box-shadow: 0 2px 5px rgba(0,0,0,0.1);">
    🌍 Colombo Air Quality Dashboard
</h2>

<div id="map"></div>

<div id="sensor-list" class="custom-scrollbar" style="
    position:absolute;
    top:100px;
    left:10px;
    background:white;
    padding:10px;
    z-index:1000;
    max-height:300px;
    overflow-y:auto;
    width:200px;
    font-size: 13px;
    border: 1px solid #ddd;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
">

    <h5 style="margin-top:0;">Sensors</h5>
    <ul id="sensor-items" style="list-style:none; padding:0; margin:0;">
    </ul>
</div>

<div id="sensor-chart-container" style="position:absolute; bottom:70px; left:10px; width:350px; height:250px; background:white; padding:10px; z-index:1000; display:none;">
    <canvas id="sensor-chart" style="width:100%; height:200px;"></canvas>
    <div style="margin-top:5px;">
        <button onclick="loadHistoricalData('day')">Day</button>
        <button onclick="loadHistoricalData('week')">Week</button>
        <button onclick="loadHistoricalData('month')">Month</button>
    </div>
</div>

<div class="top-right-links">
    <a href="/Account/Login">Login</a> |
    <a href="/Account/Register">Register</a>
</div>

<script>
    var map = L.map('map').setView([6.9271, 79.8612], 11); // Colombo center

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '© OpenStreetMap contributors'
    }).addTo(map);

    function getColor(aqi) {
        if (aqi <= 50) return "#009966";
        if (aqi <= 100) return "#ffde33";
        if (aqi <= 150) return "#ff9933";
        if (aqi <= 200) return "#cc0033";
        if (aqi <= 300) return "#660099";
        return "#7e0023";
    }

    function getCategory(aqi) {
        if (aqi <= 50) return { emoji: "😊", category: "Good" }; // Good
        if (aqi <= 100) return { emoji: "😐", category: "Moderate" }; // Moderate
        if (aqi <= 150) return { emoji: "😷", category: "Unhealthy (Sensitive)" }; // Unhealthy for Sensitive Groups
        if (aqi <= 200) return { emoji: "🤧", category: "Unhealthy" }; // Unhealthy
        if (aqi <= 300) return { emoji: "☠️", category: "Very Unhealthy" }; // Very Unhealthy
        return { emoji: "☠️", category: "Hazardous" }; // Hazardous
    }


    // 🔥 Load sensors from backend
    var sensors = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model));

    // 🌍 Create Leaflet markers safely
    sensors.forEach(sensor => {
        if (sensor.Latitude == null || sensor.Longitude == null) {
            console.warn('Skipping sensor with missing latitude/longitude:', sensor);
            return;
        }

        const aqi = sensor.CurrentAQI ?? Math.floor(Math.random() * 301); // fallback if missing

        var marker = L.marker([sensor.Latitude, sensor.Longitude], {
            icon: L.divIcon({
                className: 'custom-div-icon',
                html: `<div style="background-color:${getColor(aqi)}; color: #fff; border-radius: 5px; padding: 4px 6px; font-weight:bold;">
                    ${aqi}
                </div>`,
                iconSize: [30, 42],
                iconAnchor: [15, 42]
            })
        }).addTo(map);
            marker.bindPopup(`
        <div id="popup-${sensor.Id}" style="
            width: 220px;
            font-size: 12px;
            max-height: 260px;
            overflow-y: auto;
            scrollbar-width: thin;
            scrollbar-color: #888 #f1f1f1;
            padding: 5px;
        " class="custom-scrollbar">
            <div style="text-align: center; margin-bottom: 6px;">
                <div style="font-size: 26px;">${getCategory(aqi).emoji}</div> <!-- Dynamic emoji here -->
                <div style="
                    font-size: 15px;
                    font-weight: bold;
                    background-color: ${getColor(aqi)};
                    padding: 4px;
                    border-radius: 4px;
                    color: #000;
                    margin-top: 4px;
                ">
                    ${aqi} – ${getCategory(aqi).category} <!-- Category text here -->
                </div>
            </div>

            <div style="text-align: center; font-size: 10px; margin-bottom: 6px;">
                Updated just now
            </div>

            <div>
                <strong>PM Data</strong>
                <input type="range" min="1" max="3" value="1" class="slider" id="slider-${sensor.Id}" style="width: 100%;">
            </div>

            <div style="margin-top: 6px;">
                <canvas id="pm-chart-${sensor.Id}" width="200" height="80"></canvas>
            </div>

            <div style="margin-top: 8px;">
                <canvas id="year-chart-${sensor.Id}" width="200" height="40"></canvas>
            </div>
        </div>
    `);



               marker.on('popupopen', function () {
        // Load hourly and monthly data dynamically
        fetch(`/Home/GetHourlyPm?sensorId=${sensor.Id}`)
            .then(response => response.json())
            .then(data => {
                renderMiniPmChart(sensor.Id, data.pm25, data.pm10);
            });

        fetch(`/Home/GetMonthlyPm?sensorId=${sensor.Id}`)
            .then(response => response.json())
            .then(data => {
                renderYearlyPmChart(sensor.Id, data.months, data.values);
            });
    });


    });

    // 📊 Chart instances storage
    var chartInstances = {};

        // 📊 Chart instances storage
    var chartInstances = {};

    function loadChart(sensorId) {
        const rangeSelect = document.getElementById(`range-select-${sensorId}`);
        const canvas = document.getElementById(`chart-${sensorId}`);
        if (!canvas) return;

        function fetchAndRender(range) {
            fetch(`/Home/GetAqiHistory?sensorId=${encodeURIComponent(sensorId)}&days=${range === 'week' ? 7 : range === 'month' ? 30 : 1}`)
                .then(response => response.json())
                .then(data => {
                    if (chartInstances[sensorId]) {
                        chartInstances[sensorId].destroy(); // Ensure previous chart instance is destroyed
                    }

                    chartInstances[sensorId] = new Chart(canvas, {
                        type: 'line',
                        data: {
                            labels: data.dates,
                            datasets: [{
                                label: `AQI (${range})`,
                                data: data.aqiValues,
                                borderColor: 'rgba(54, 162, 235, 1)',
                                backgroundColor: 'rgba(54, 162, 235, 0.2)',
                                fill: true,
                                tension: 0.4,
                                pointRadius: 2,
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    suggestedMax: 300
                                }
                            },
                            plugins: {
                                legend: {
                                    display: false
                                }
                            }
                        }
                    });
                })
                .catch(error => console.error('Error loading chart:', error));
        }

        fetchAndRender('day');

        if (rangeSelect) {
            rangeSelect.addEventListener('change', () => {
                const selectedRange = rangeSelect.value;
                fetchAndRender(selectedRange);
            });
        }
    }


        function renderMiniPmChart(sensorId, pm25Data, pm10Data) {
        const ctx = document.getElementById(`pm-chart-${sensorId}`);
        if (!ctx) return;

        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: pm25Data.map((_, i) => `${i}h`),
                datasets: [
                    {
                        label: 'PM2.5',
                        data: pm25Data,
                        backgroundColor: 'rgba(255, 99, 132, 0.5)'
                    },
                    {
                        label: 'PM10',
                        data: pm10Data,
                        backgroundColor: 'rgba(54, 162, 235, 0.5)'
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: { beginAtZero: true }
                },
                plugins: {
                    legend: { display: true }
                }
            }
        });
    }

    function renderYearlyPmChart(sensorId, months, values) {
        const ctx = document.getElementById(`year-chart-${sensorId}`);
        if (!ctx) return;

        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: months, // E.g., ['Jan', 'Feb', ..., 'Dec']
                datasets: [{
                    label: 'PM2.5',
                    data: values,
                    backgroundColor: 'rgba(75, 192, 192, 0.5)'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: { beginAtZero: true }
                },
                plugins: {
                    legend: { display: false }
                }
            }
        });
    }


    // 🖍️ Legend
    var legend = L.control({ position: 'bottomright' });

    legend.onAdd = function () {
        var div = L.DomUtil.create('div', 'legend'),
            grades = [0, 50, 100, 150, 200, 300],
            labels = ['Good', 'Moderate', 'Unhealthy (Sensitive)', 'Unhealthy', 'Very Unhealthy', 'Hazardous'];

        for (var i = 0; i < grades.length; i++) {
            div.innerHTML +=
                '<i style="background:' + getColor(grades[i] + 1) + '; width: 18px; height: 18px; display:inline-block; margin-right:8px;"></i> ' +
                labels[i] + '<br>';
        }
        return div;
    };

    legend.addTo(map);

    // 📋 Sidebar sensor list
    var sensorList = document.getElementById('sensor-items');

    sensors.forEach(sensor => {
        var li = document.createElement('li');
        li.innerHTML = `<a href="#" onclick="selectSensor(${sensor.Id}, '${sensor.LocationName}')">${sensor.LocationName}</a>`;
        sensorList.appendChild(li);
    });

    var selectedSensorId = null;
    var historicalChart = null;

    function selectSensor(sensorId, sensorName) {
        selectedSensorId = sensorId;
        document.getElementById('sensor-chart-container').style.display = 'block';
        loadHistoricalData('day');
    }

    function loadHistoricalData(range) {
        if (!selectedSensorId) return;

        let days = range === 'week' ? 7 : range === 'month' ? 30 : 1;

        fetch(`/Home/GetAqiHistory?sensorId=${encodeURIComponent(selectedSensorId)}&days=${days}`)
            .then(response => response.json())
            .then(data => {
                const ctx = document.getElementById('sensor-chart').getContext('2d');

                if (historicalChart) {
                    historicalChart.destroy();
                }

                historicalChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: data.dates,
                        datasets: [{
                            label: `AQI - Last ${range}`,
                            data: data.aqiValues,
                            borderColor: 'rgba(54, 162, 235, 1)',
                            backgroundColor: 'rgba(54, 162, 235, 0.2)',
                            fill: true,
                            tension: 0.4,
                            pointRadius: 2,
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true,
                                suggestedMax: 300
                            }
                        }
                    }
                });
            })
            .catch(error => console.error('Error loading historical AQI data:', error));
    }

    // Adjust chart container positioning on window resize
    window.addEventListener('resize', adjustChartPosition);

        function adjustChartPosition() {
        var chartContainer = document.getElementById('sensor-chart-container');
        var footerHeight = 60; // Adjust this to match your footer's height (if applicable)
        var sensorListHeight = document.getElementById('sensor-list').offsetHeight; // Get height of the sensor list
        var windowHeight = window.innerHeight;

        // Adjust the available space for the chart container
        var availableHeight = windowHeight - footerHeight - sensorListHeight - 20; // Subtracting 20px for spacing

        // Update the position of the chart container dynamically
        chartContainer.style.bottom = `${availableHeight}px`;
    }

</script>
