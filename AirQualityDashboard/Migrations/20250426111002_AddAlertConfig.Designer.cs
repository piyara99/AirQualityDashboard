// <auto-generated />
using System;
using AirQualityDashboard.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AirQualityDashboard.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250426111002_AddAlertConfig")]
    partial class AddAlertConfig
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AirQualityDashboard.Models.AQIReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AQIReadings");
                });

            modelBuilder.Entity("AirQualityDashboard.Models.AlertConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ModerateThreshold")
                        .HasColumnType("int");

                    b.Property<int>("UnhealthyThreshold")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AlertConfig");
                });

            modelBuilder.Entity("AirQualityDashboard.Models.AlertThreshold", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColorHex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxAQI")
                        .HasColumnType("int");

                    b.Property<int>("MinAQI")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AlertThresholds");
                });

            modelBuilder.Entity("AirQualityDashboard.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("AirQualityDashboard.Models.Sensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SensorIndex")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Sensors");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            IsActive = true,
                            Latitude = 6.9271000000000003,
                            LocationName = "Colombo Central",
                            Longitude = 79.861199999999997,
                            Name = "Colombo Central",
                            SensorIndex = 12345
                        },
                        new
                        {
                            Id = -2,
                            IsActive = true,
                            Latitude = 6.9714,
                            LocationName = "Colombo North",
                            Longitude = 79.866200000000006,
                            Name = "Colombo North",
                            SensorIndex = 67890
                        },
                        new
                        {
                            Id = -3,
                            IsActive = true,
                            Latitude = 6.8825000000000003,
                            LocationName = "Colombo South",
                            Longitude = 79.888599999999997,
                            Name = "Colombo South",
                            SensorIndex = 13579
                        });
                });

            modelBuilder.Entity("AirQualityDashboard.Models.SensorData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AQI")
                        .HasColumnType("int");

                    b.Property<float>("PM10")
                        .HasColumnType("real");

                    b.Property<float>("PM25")
                        .HasColumnType("real");

                    b.Property<int>("SensorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SensorId");

                    b.ToTable("SensorDataRecords");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AQI = 45,
                            PM10 = 22.1f,
                            PM25 = 12.3f,
                            SensorId = -1,
                            Timestamp = new DateTime(2024, 4, 21, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            AQI = 48,
                            PM10 = 23.4f,
                            PM25 = 13.1f,
                            SensorId = -1,
                            Timestamp = new DateTime(2024, 4, 21, 1, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            AQI = 52,
                            PM10 = 25.9f,
                            PM25 = 14.8f,
                            SensorId = -1,
                            Timestamp = new DateTime(2024, 4, 21, 2, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            AQI = 55,
                            PM10 = 28.4f,
                            PM25 = 16f,
                            SensorId = -1,
                            Timestamp = new DateTime(2024, 4, 21, 3, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 5,
                            AQI = 60,
                            PM10 = 30.2f,
                            PM25 = 17.3f,
                            SensorId = -1,
                            Timestamp = new DateTime(2024, 4, 21, 4, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 6,
                            AQI = 63,
                            PM10 = 31.7f,
                            PM25 = 18.5f,
                            SensorId = -1,
                            Timestamp = new DateTime(2024, 4, 21, 5, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 7,
                            AQI = 67,
                            PM10 = 32.5f,
                            PM25 = 19.2f,
                            SensorId = -1,
                            Timestamp = new DateTime(2024, 4, 21, 6, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 8,
                            AQI = 70,
                            PM10 = 34.1f,
                            PM25 = 20f,
                            SensorId = -1,
                            Timestamp = new DateTime(2024, 4, 21, 7, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 9,
                            AQI = 72,
                            PM10 = 35.8f,
                            PM25 = 21.1f,
                            SensorId = -1,
                            Timestamp = new DateTime(2024, 4, 21, 8, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 10,
                            AQI = 75,
                            PM10 = 37.3f,
                            PM25 = 22.4f,
                            SensorId = -1,
                            Timestamp = new DateTime(2024, 4, 21, 9, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 11,
                            AQI = 78,
                            PM10 = 39f,
                            PM25 = 23.2f,
                            SensorId = -1,
                            Timestamp = new DateTime(2024, 4, 21, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 12,
                            AQI = 80,
                            PM10 = 40.2f,
                            PM25 = 24f,
                            SensorId = -1,
                            Timestamp = new DateTime(2024, 4, 21, 11, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 13,
                            AQI = 82,
                            PM10 = 41.9f,
                            PM25 = 24.8f,
                            SensorId = -1,
                            Timestamp = new DateTime(2024, 4, 21, 12, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 14,
                            AQI = 79,
                            PM10 = 40.7f,
                            PM25 = 23.5f,
                            SensorId = -1,
                            Timestamp = new DateTime(2024, 4, 21, 13, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 15,
                            AQI = 76,
                            PM10 = 38.9f,
                            PM25 = 22.1f,
                            SensorId = -1,
                            Timestamp = new DateTime(2024, 4, 21, 14, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 16,
                            AQI = 70,
                            PM10 = 35.7f,
                            PM25 = 20.4f,
                            SensorId = -1,
                            Timestamp = new DateTime(2024, 4, 21, 15, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 17,
                            AQI = 68,
                            PM10 = 34.2f,
                            PM25 = 19.6f,
                            SensorId = -1,
                            Timestamp = new DateTime(2024, 4, 21, 16, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 18,
                            AQI = 66,
                            PM10 = 32.9f,
                            PM25 = 18.8f,
                            SensorId = -1,
                            Timestamp = new DateTime(2024, 4, 21, 17, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 19,
                            AQI = 62,
                            PM10 = 30.4f,
                            PM25 = 17.5f,
                            SensorId = -1,
                            Timestamp = new DateTime(2024, 4, 21, 18, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 20,
                            AQI = 58,
                            PM10 = 28.3f,
                            PM25 = 16.2f,
                            SensorId = -1,
                            Timestamp = new DateTime(2024, 4, 21, 19, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 21,
                            AQI = 55,
                            PM10 = 26.5f,
                            PM25 = 15.1f,
                            SensorId = -1,
                            Timestamp = new DateTime(2024, 4, 21, 20, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 22,
                            AQI = 50,
                            PM10 = 24.2f,
                            PM25 = 14f,
                            SensorId = -1,
                            Timestamp = new DateTime(2024, 4, 21, 21, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 23,
                            AQI = 47,
                            PM10 = 23f,
                            PM25 = 13.2f,
                            SensorId = -1,
                            Timestamp = new DateTime(2024, 4, 21, 22, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 24,
                            AQI = 44,
                            PM10 = 21.7f,
                            PM25 = 12.5f,
                            SensorId = -1,
                            Timestamp = new DateTime(2024, 4, 21, 23, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 25,
                            AQI = 38,
                            PM10 = 18.5f,
                            PM25 = 10.1f,
                            SensorId = -2,
                            Timestamp = new DateTime(2024, 4, 21, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 26,
                            AQI = 40,
                            PM10 = 19.9f,
                            PM25 = 11.2f,
                            SensorId = -2,
                            Timestamp = new DateTime(2024, 4, 21, 1, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 27,
                            AQI = 43,
                            PM10 = 20.8f,
                            PM25 = 12f,
                            SensorId = -2,
                            Timestamp = new DateTime(2024, 4, 21, 2, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 28,
                            AQI = 47,
                            PM10 = 22.3f,
                            PM25 = 13.5f,
                            SensorId = -2,
                            Timestamp = new DateTime(2024, 4, 21, 3, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 29,
                            AQI = 52,
                            PM10 = 24f,
                            PM25 = 14.8f,
                            SensorId = -2,
                            Timestamp = new DateTime(2024, 4, 21, 4, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 30,
                            AQI = 54,
                            PM10 = 25.2f,
                            PM25 = 15.5f,
                            SensorId = -2,
                            Timestamp = new DateTime(2024, 4, 21, 5, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 31,
                            AQI = 59,
                            PM10 = 27.4f,
                            PM25 = 16.7f,
                            SensorId = -2,
                            Timestamp = new DateTime(2024, 4, 21, 6, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 32,
                            AQI = 62,
                            PM10 = 29f,
                            PM25 = 17.6f,
                            SensorId = -2,
                            Timestamp = new DateTime(2024, 4, 21, 7, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 33,
                            AQI = 65,
                            PM10 = 30.1f,
                            PM25 = 18.9f,
                            SensorId = -2,
                            Timestamp = new DateTime(2024, 4, 21, 8, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 34,
                            AQI = 68,
                            PM10 = 31.4f,
                            PM25 = 19.7f,
                            SensorId = -2,
                            Timestamp = new DateTime(2024, 4, 21, 9, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 35,
                            AQI = 70,
                            PM10 = 32.8f,
                            PM25 = 20.5f,
                            SensorId = -2,
                            Timestamp = new DateTime(2024, 4, 21, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 36,
                            AQI = 72,
                            PM10 = 34.3f,
                            PM25 = 21.2f,
                            SensorId = -2,
                            Timestamp = new DateTime(2024, 4, 21, 11, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 37,
                            AQI = 71,
                            PM10 = 33.5f,
                            PM25 = 20.9f,
                            SensorId = -2,
                            Timestamp = new DateTime(2024, 4, 21, 12, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 38,
                            AQI = 69,
                            PM10 = 32.2f,
                            PM25 = 20f,
                            SensorId = -2,
                            Timestamp = new DateTime(2024, 4, 21, 13, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 39,
                            AQI = 66,
                            PM10 = 30.7f,
                            PM25 = 19.2f,
                            SensorId = -2,
                            Timestamp = new DateTime(2024, 4, 21, 14, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 40,
                            AQI = 63,
                            PM10 = 29.1f,
                            PM25 = 18f,
                            SensorId = -2,
                            Timestamp = new DateTime(2024, 4, 21, 15, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 41,
                            AQI = 60,
                            PM10 = 27.5f,
                            PM25 = 17.1f,
                            SensorId = -2,
                            Timestamp = new DateTime(2024, 4, 21, 16, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 42,
                            AQI = 57,
                            PM10 = 25.9f,
                            PM25 = 16f,
                            SensorId = -2,
                            Timestamp = new DateTime(2024, 4, 21, 17, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 43,
                            AQI = 54,
                            PM10 = 24.3f,
                            PM25 = 15f,
                            SensorId = -2,
                            Timestamp = new DateTime(2024, 4, 21, 18, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 44,
                            AQI = 50,
                            PM10 = 22.7f,
                            PM25 = 13.9f,
                            SensorId = -2,
                            Timestamp = new DateTime(2024, 4, 21, 19, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 45,
                            AQI = 46,
                            PM10 = 21f,
                            PM25 = 12.7f,
                            SensorId = -2,
                            Timestamp = new DateTime(2024, 4, 21, 20, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 46,
                            AQI = 42,
                            PM10 = 19.2f,
                            PM25 = 11.3f,
                            SensorId = -2,
                            Timestamp = new DateTime(2024, 4, 21, 21, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 47,
                            AQI = 39,
                            PM10 = 18f,
                            PM25 = 10.6f,
                            SensorId = -2,
                            Timestamp = new DateTime(2024, 4, 21, 22, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 48,
                            AQI = 37,
                            PM10 = 17.1f,
                            PM25 = 9.8f,
                            SensorId = -2,
                            Timestamp = new DateTime(2024, 4, 21, 23, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 49,
                            AQI = 60,
                            PM10 = 26.3f,
                            PM25 = 16.2f,
                            SensorId = -3,
                            Timestamp = new DateTime(2024, 4, 21, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 50,
                            AQI = 62,
                            PM10 = 27.5f,
                            PM25 = 17f,
                            SensorId = -3,
                            Timestamp = new DateTime(2024, 4, 21, 1, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 51,
                            AQI = 65,
                            PM10 = 28.9f,
                            PM25 = 18.1f,
                            SensorId = -3,
                            Timestamp = new DateTime(2024, 4, 21, 2, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 52,
                            AQI = 68,
                            PM10 = 30.1f,
                            PM25 = 19.3f,
                            SensorId = -3,
                            Timestamp = new DateTime(2024, 4, 21, 3, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 53,
                            AQI = 72,
                            PM10 = 31.7f,
                            PM25 = 20.6f,
                            SensorId = -3,
                            Timestamp = new DateTime(2024, 4, 21, 4, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 54,
                            AQI = 75,
                            PM10 = 33.4f,
                            PM25 = 21.5f,
                            SensorId = -3,
                            Timestamp = new DateTime(2024, 4, 21, 5, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 55,
                            AQI = 78,
                            PM10 = 35.2f,
                            PM25 = 22.3f,
                            SensorId = -3,
                            Timestamp = new DateTime(2024, 4, 21, 6, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 56,
                            AQI = 80,
                            PM10 = 36.8f,
                            PM25 = 23.1f,
                            SensorId = -3,
                            Timestamp = new DateTime(2024, 4, 21, 7, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 57,
                            AQI = 83,
                            PM10 = 38.2f,
                            PM25 = 24.4f,
                            SensorId = -3,
                            Timestamp = new DateTime(2024, 4, 21, 8, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 58,
                            AQI = 85,
                            PM10 = 39.6f,
                            PM25 = 25.2f,
                            SensorId = -3,
                            Timestamp = new DateTime(2024, 4, 21, 9, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 59,
                            AQI = 88,
                            PM10 = 41f,
                            PM25 = 26.3f,
                            SensorId = -3,
                            Timestamp = new DateTime(2024, 4, 21, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 60,
                            AQI = 90,
                            PM10 = 42.3f,
                            PM25 = 27f,
                            SensorId = -3,
                            Timestamp = new DateTime(2024, 4, 21, 11, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 61,
                            AQI = 87,
                            PM10 = 41.2f,
                            PM25 = 26f,
                            SensorId = -3,
                            Timestamp = new DateTime(2024, 4, 21, 12, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 62,
                            AQI = 84,
                            PM10 = 39.4f,
                            PM25 = 24.9f,
                            SensorId = -3,
                            Timestamp = new DateTime(2024, 4, 21, 13, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 63,
                            AQI = 81,
                            PM10 = 37.8f,
                            PM25 = 23.7f,
                            SensorId = -3,
                            Timestamp = new DateTime(2024, 4, 21, 14, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 64,
                            AQI = 78,
                            PM10 = 36f,
                            PM25 = 22.5f,
                            SensorId = -3,
                            Timestamp = new DateTime(2024, 4, 21, 15, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 65,
                            AQI = 75,
                            PM10 = 33.9f,
                            PM25 = 21.2f,
                            SensorId = -3,
                            Timestamp = new DateTime(2024, 4, 21, 16, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 66,
                            AQI = 72,
                            PM10 = 32.3f,
                            PM25 = 20.1f,
                            SensorId = -3,
                            Timestamp = new DateTime(2024, 4, 21, 17, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 67,
                            AQI = 69,
                            PM10 = 30.6f,
                            PM25 = 19f,
                            SensorId = -3,
                            Timestamp = new DateTime(2024, 4, 21, 18, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 68,
                            AQI = 65,
                            PM10 = 28.8f,
                            PM25 = 17.9f,
                            SensorId = -3,
                            Timestamp = new DateTime(2024, 4, 21, 19, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 69,
                            AQI = 62,
                            PM10 = 26.7f,
                            PM25 = 16.5f,
                            SensorId = -3,
                            Timestamp = new DateTime(2024, 4, 21, 20, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 70,
                            AQI = 59,
                            PM10 = 25f,
                            PM25 = 15.3f,
                            SensorId = -3,
                            Timestamp = new DateTime(2024, 4, 21, 21, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 71,
                            AQI = 55,
                            PM10 = 23.5f,
                            PM25 = 14.1f,
                            SensorId = -3,
                            Timestamp = new DateTime(2024, 4, 21, 22, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 72,
                            AQI = 52,
                            PM10 = 22f,
                            PM25 = 13f,
                            SensorId = -3,
                            Timestamp = new DateTime(2024, 4, 21, 23, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("AirQualityDashboard.Models.SimulationConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BaseAQI")
                        .HasColumnType("int");

                    b.Property<int>("FrequencyInSeconds")
                        .HasColumnType("int");

                    b.Property<bool>("IsRunning")
                        .HasColumnType("bit");

                    b.Property<int>("VariationRange")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SimulationConfigs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseAQI = 100,
                            FrequencyInSeconds = 60,
                            IsRunning = true,
                            VariationRange = 20
                        });
                });

            modelBuilder.Entity("AirQualityDashboard.Models.SystemConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConfigKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfigValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SystemConfig");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConfigKey = "SystemName",
                            ConfigValue = "Air Quality Dashboard",
                            Description = "Name of the application",
                            LastUpdated = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            ConfigKey = "MaintenanceMode",
                            ConfigValue = "false",
                            Description = "Whether system is in maintenance mode",
                            LastUpdated = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("AirQualityDashboard.Models.SensorData", b =>
                {
                    b.HasOne("AirQualityDashboard.Models.Sensor", "Sensor")
                        .WithMany("SensorDataRecords")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AirQualityDashboard.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AirQualityDashboard.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirQualityDashboard.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AirQualityDashboard.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AirQualityDashboard.Models.Sensor", b =>
                {
                    b.Navigation("SensorDataRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
